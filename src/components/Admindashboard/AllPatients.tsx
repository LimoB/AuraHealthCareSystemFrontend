import React, { useState, useMemo } from 'react';
import {
  useGetPatientsQuery,
  useCreatePatientMutation,
  useUpdatePatientMutation,
  useDeletePatientMutation,
  type PatientData
} from '../../features/api/PatientsApi'; 

const AllPatients: React.FC = () => {
  // RTK Query hooks for data fetching and mutations
  const { data: patients = [], error, isLoading, refetch } = useGetPatientsQuery();
  const [addPatientMutation, { isLoading: isAdding }] = useCreatePatientMutation();
  const [updatePatientMutation, { isLoading: isUpdating }] = useUpdatePatientMutation();
  const [deletePatientMutation, { isLoading: isDeleting }] = useDeletePatientMutation();

  // State to manage the form data for adding/editing a patient
  const [formData, setFormData] = useState<Omit<PatientData, 'patientId' | 'createdAt' | 'updatedAt'> & { patientId?: number }>({
    patientId: undefined, // Used for editing: undefined for new, patientId for existing
    firstName: '',
    lastName: '',
    contactPhone: '',
  });
  // State to manage the visibility of the add/edit form
  const [isFormVisible, setIsFormVisible] = useState(false);
  // State for search query
  const [searchQuery, setSearchQuery] = useState('');
  // State for confirmation modal
  const [showConfirmModal, setShowConfirmModal] = useState(false);
  const [patientToDelete, setPatientToDelete] = useState<PatientData | null>(null);
  // State for displaying API errors from mutations
  const [apiError, setApiError] = useState<string | null>(null);

  // Combine all loading states for a global loading indicator
  const overallLoading = isLoading || isAdding || isUpdating || isDeleting;

  // Helper function to extract error message from RTK Query error object
  const getErrorMessage = (err: any): string => {
    if (typeof err === 'object' && err !== null) {
      // Check for FetchBaseQueryError structure (common for API responses)
      if ('data' in err && typeof err.data === 'object' && err.data !== null && 'message' in err.data) {
        return (err.data as { message: string }).message;
      }
      // Check for network errors or other generic errors
      if ('error' in err && typeof err.error === 'string') {
        return err.error;
      }
      // Fallback for other error structures
      return JSON.stringify(err); // Consider better error serialization for production
    }
    return String(err); // Convert non-object errors to string
  };

  // Handle input changes in the form
  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target; // No checkbox for patients
    setFormData((prevData) => ({
      ...prevData,
      [name]: value,
    }));
  };

  // Handle form submission (add or edit patient)
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setApiError(null); // Clear previous API errors
    try {
      if (formData.patientId) {
        // Editing an existing patient
        await updatePatientMutation({ patientId: formData.patientId, ...formData }).unwrap();
      } else {
        // Adding a new patient
        // Omit patientId as it's auto-generated by the backend
        const { patientId, ...newPatientData } = formData;
        await addPatientMutation(newPatientData as Omit<PatientData, 'patientId' | 'createdAt' | 'updatedAt'>).unwrap();
      }
      resetForm();
      setIsFormVisible(false); // Hide form after submission
    } catch (err: any) {
      console.error("Failed to save patient:", err);
      setApiError(`Failed to save patient: ${getErrorMessage(err)}`);
    }
  };

  // Function to reset the form data
  const resetForm = () => {
    setFormData({
      patientId: undefined,
      firstName: '',
      lastName: '',
      contactPhone: '',
    });
  };

  // Function to open the form for adding a new patient
  const handleAddPatient = () => {
    resetForm();
    setIsFormVisible(true);
    setApiError(null); // Clear any previous API errors
  };

  // Function to open the form for editing an existing patient
  const handleEditPatient = (patient: PatientData) => {
    setFormData({
      patientId: patient.patientId,
      firstName: patient.firstName,
      lastName: patient.lastName,
      contactPhone: patient.contactPhone || '', // Ensure it's a string, can be null in DB
    });
    setIsFormVisible(true);
    setApiError(null); // Clear any previous API errors
  };

  // Function to handle patient deletion confirmation
  const handleDeleteConfirmation = (patient: PatientData) => {
    setPatientToDelete(patient);
    setShowConfirmModal(true);
    setApiError(null); // Clear any previous API errors
  };

  // Function to delete a patient after confirmation
  const handleDeletePatient = async () => {
    if (!patientToDelete) return;

    setApiError(null); // Clear previous API errors
    try {
      await deletePatientMutation(patientToDelete.patientId).unwrap();
      setShowConfirmModal(false);
      setPatientToDelete(null);
    } catch (err: any) {
      console.error("Failed to delete patient:", err);
      setApiError(`Failed to delete patient: ${getErrorMessage(err)}`);
    }
  };

  // Filter and sort patients based on backend data and search query
  const filteredAndSortedPatients = useMemo(() => {
    let currentPatients = [...patients]; // Create a mutable copy to sort

    // Apply search filter
    if (searchQuery) {
      currentPatients = currentPatients.filter(patient =>
        patient.firstName.toLowerCase().includes(searchQuery.toLowerCase()) ||
        patient.lastName.toLowerCase().includes(searchQuery.toLowerCase()) ||
        (patient.contactPhone && patient.contactPhone.toLowerCase().includes(searchQuery.toLowerCase()))
      );
    }

    // Sort by firstName alphabetically.
    currentPatients.sort((a, b) => a.firstName.localeCompare(b.firstName));

    return currentPatients;
  }, [patients, searchQuery]); // Re-run memoization if patients data or search query changes

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 p-4 font-sans text-gray-800">
      <script src="https://cdn.tailwindcss.com"></script>
      <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet" />

      <style>
        {`
          body {
            font-family: 'Inter', sans-serif;
          }
          .modal-overlay {
            background-color: rgba(0, 0, 0, 0.5);
          }
        `}
      </style>

      <div className="max-w-6xl mx-auto bg-white shadow-2xl rounded-xl p-8 space-y-8">
        <h1 className="text-4xl font-extrabold text-center text-indigo-700 mb-8">
          <i className="fas fa-user-injured mr-3 text-indigo-500"></i> {/* Changed icon to something more patient-like */}
          Patients Administration
        </h1>

        {overallLoading && (
          <div className="fixed inset-0 flex items-center justify-center bg-gray-200 bg-opacity-75 z-50">
            <div className="flex items-center space-x-3 p-4 bg-white rounded-lg shadow-lg">
              <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-indigo-500"></div>
              <p className="text-lg text-indigo-700">Loading data...</p>
            </div>
          </div>
        )}

        {/* Global Fetch Error */}
        {error && (
          <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-4" role="alert">
            <strong className="font-bold">Error!</strong>
            <span className="block sm:inline ml-2">
              Failed to load patients: {getErrorMessage(error)}. Please ensure your backend API is running and accessible.
            </span>
            <span className="absolute top-0 bottom-0 right-0 px-4 py-3">
              <svg onClick={() => refetch()} className="fill-current h-6 w-6 text-red-500 cursor-pointer" role="button" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20"><title>Retry</title><path d="M10 3a7 7 0 00-7 7h-1.5a.5.5 0 00-.354.854l2.5 2.5a.5.5 0 00.708 0l2.5-2.5a.5.5 0 00-.354-.854H10a5 5 0 110 10 5 5 0 010-10zM10 14a4 4 0 100-8 4 4 0 000 8z"/></svg>
            </span>
          </div>
        )}

        {/* API Operation Error (Add/Update/Delete) */}
        {apiError && (
          <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-4" role="alert">
            <strong className="font-bold">Operation Error!</strong>
            <span className="block sm:inline ml-2">{apiError}</span>
            <span className="absolute top-0 bottom-0 right-0 px-4 py-3">
              <svg onClick={() => setApiError(null)} className="fill-current h-6 w-6 text-red-500 cursor-pointer" role="button" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20"><title>Close</title><path d="M14.348 14.849a1.2 1.2 0 0 1-1.697 0L10 11.819l-2.651 3.029a1.2 1.2 0 1 1-1.697-1.697l2.758-3.15-2.759-3.152a1.2 1.2 0 1 1 1.697-1.697L10 8.183l2.651-3.031a1.2 1.2 0 1 1 1.697 1.697l-2.758 3.152 2.758 3.15a1.2 1.2 0 0 1 0 1.698z"/></svg>
            </span>
          </div>
        )}

        {/* Add Patient Button and Search Input */}
        <div className="flex flex-col sm:flex-row justify-between items-center mb-6 space-y-4 sm:space-y-0">
          <button
            onClick={handleAddPatient}
            className="flex items-center px-6 py-3 bg-indigo-600 text-white font-semibold rounded-full shadow-lg hover:bg-indigo-700 transition duration-300 ease-in-out transform hover:scale-105 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-opacity-75 w-full sm:w-auto justify-center"
          >
            <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
              <path fillRule="evenodd" d="M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z" clipRule="evenodd" />
            </svg>
            Add New Patient
          </button>
          <input
            type="text"
            placeholder="Search patients by name or contact..."
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            className="p-3 border border-gray-300 rounded-full shadow-sm focus:ring-2 focus:ring-indigo-500 focus:border-transparent transition duration-200 w-full sm:max-w-xs"
          />
        </div>

        {/* Add/Edit Patient Form */}
        {isFormVisible && (
          <div className="bg-white p-6 rounded-lg shadow-xl border border-indigo-200 mb-8">
            <h2 className="text-2xl font-bold text-indigo-600 mb-6">
              {formData.patientId ? 'Edit Patient' : 'Add New Patient'}
            </h2>
            <form onSubmit={handleSubmit} className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <label htmlFor="firstName" className="block text-sm font-medium text-gray-700 mb-1">First Name</label>
                <input
                  type="text"
                  id="firstName"
                  name="firstName"
                  value={formData.firstName}
                  onChange={handleInputChange}
                  className="w-full p-3 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 transition duration-200"
                  required
                />
              </div>
              <div>
                <label htmlFor="lastName" className="block text-sm font-medium text-gray-700 mb-1">Last Name</label>
                <input
                  type="text"
                  id="lastName"
                  name="lastName"
                  value={formData.lastName}
                  onChange={handleInputChange}
                  className="w-full p-3 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 transition duration-200"
                  required
                />
              </div>
              <div>
                <label htmlFor="contactPhone" className="block text-sm font-medium text-gray-700 mb-1">Contact Phone</label>
                <input
                  type="text"
                  id="contactPhone"
                  name="contactPhone"
                  value={formData.contactPhone}
                  onChange={handleInputChange}
                  className="w-full p-3 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 transition duration-200"
                />
              </div>
              {/* Removed isAvailable checkbox as it's not a patient field */}
              <div className="md:col-span-2 flex justify-end space-x-4 mt-4">
                <button
                  type="button"
                  onClick={() => { setIsFormVisible(false); resetForm(); }}
                  className="px-6 py-3 border border-gray-300 rounded-full text-gray-700 font-semibold hover:bg-gray-100 transition duration-300 ease-in-out focus:outline-none focus:ring-2 focus:ring-gray-400 focus:ring-opacity-75"
                >
                  Cancel
                </button>
                <button
                  type="submit"
                  className="px-6 py-3 bg-green-600 text-white font-semibold rounded-full shadow-md hover:bg-green-700 transition duration-300 ease-in-out transform hover:scale-105 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-opacity-75"
                >
                  {formData.patientId ? 'Update Patient' : 'Save Patient'}
                </button>
              </div>
            </form>
          </div>
        )}

        {/* Patients List/Table */}
        <div className="bg-white p-6 rounded-xl shadow-xl border border-indigo-200">
          <h2 className="text-2xl font-bold text-indigo-600 mb-6">Patients List</h2>
          {isLoading && <p className="text-center text-gray-600 text-lg py-8">Fetching patients...</p>}
          {error && !isLoading && <p className="text-center text-red-600 text-lg py-8">Could not load patients.</p>}
          {!isLoading && !error && filteredAndSortedPatients.length === 0 ? (
            <p className="text-center text-gray-600 text-lg py-8">No patients found. Try adding one!</p>
          ) : (
            <div className="overflow-x-auto">
              <table className="min-w-full divide-y divide-gray-200">
                <thead className="bg-indigo-50">
                  <tr>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider rounded-tl-lg">ID</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Full Name</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Contact</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider rounded-tr-lg">Actions</th>
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-gray-200">
                  {filteredAndSortedPatients.map((patient) => (
                    <tr key={patient.patientId} className="hover:bg-gray-50 transition duration-150 ease-in-out">
                      <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">{patient.patientId}</td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{patient.firstName} {patient.lastName}</td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{patient.contactPhone}</td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                        <div className="flex space-x-3">
                          <button
                            onClick={() => handleEditPatient(patient)}
                            className="text-indigo-600 hover:text-indigo-900 transition duration-150 ease-in-out transform hover:scale-110"
                            title="Edit Patient"
                          >
                            <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                              <path d="M13.586 3.586a2 2 0 112.828 2.828l-.793.793-2.828-2.828.793-.793zM11.379 5.793L3 14.172V17h2.828l8.38-8.38-2.827-2.828z" />
                            </svg>
                          </button>
                          <button
                            onClick={() => handleDeleteConfirmation(patient)}
                            className="text-red-600 hover:text-red-900 transition duration-150 ease-in-out transform hover:scale-110"
                            title="Delete Patient"
                          >
                            <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                              <path fillRule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 011-1h4a1 1 0 110 2H8a1 1 0 01-1-1zm6 2a1 1 0 100 2v3a1 1 0 102 0v-3a1 1 0 00-2 0z" clipRule="evenodd" />
                            </svg>
                          </button>
                        </div>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          )}
        </div>

        {/* Confirmation Modal */}
        {showConfirmModal && (
          <div className="fixed inset-0 flex items-center justify-center z-50 modal-overlay">
            <div className="bg-white p-8 rounded-lg shadow-2xl max-w-sm mx-auto text-center border border-red-300">
              <h3 className="text-xl font-bold text-red-700 mb-4">Confirm Deletion</h3>
              <p className="text-gray-700 mb-6">
                Are you sure you want to delete patient{' '}
                <span className="font-semibold">{patientToDelete?.firstName} {patientToDelete?.lastName}</span>?
                This action cannot be undone.
              </p>
              <div className="flex justify-center space-x-4">
                <button
                  onClick={() => setShowConfirmModal(false)}
                  className="px-6 py-3 border border-gray-300 rounded-full text-gray-700 font-semibold hover:bg-gray-100 transition duration-300 ease-in-out"
                >
                  Cancel
                </button>
                <button
                  onClick={handleDeletePatient}
                  className="px-6 py-3 bg-red-600 text-white font-semibold rounded-full shadow-md hover:bg-red-700 transition duration-300 ease-in-out"
                >
                  Delete
                </button>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default AllPatients;