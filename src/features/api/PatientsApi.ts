import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react";
import type { RootState } from "../../app/types";
// import { backendUrl } from "../../backendUrl";

const backendUrl = import.meta.env.VITE_BACKEND_URL;

export interface PatientData { 
    patientId: number;
    userId?: number;
    firstName: string;
    lastName: string;
    contactPhone?: string;
    createdAt: string;
    updatedAt: string;
}

// Interface for the payload when creating a new patient
// Omit fields that are typically generated by the backend
export type CreatePatientPayload = Omit<PatientData, 'patientId' | 'createdAt' | 'updatedAt'>;

// Interface for patient login credentials
export interface PatientLoginCredentials {
    email: string;
    password: string;
}

// Interface for login response (assuming your backend returns a token and perhaps user info)
export interface LoginResponse {
    token: string;
    user: {
      userId: number;
      email: string;
      firstName: string;
      lastName: string;
      userType: 'patient' | 'doctor' | 'admin';
      role: string;
     }
    
}

// --- Patients API Definition ---

export const patientsApi = createApi({
    reducerPath: 'patientsApi',
    baseQuery: fetchBaseQuery({
        baseUrl: backendUrl,
        prepareHeaders: (headers, { getState }) => {
            const token = (getState() as RootState).auth?.token;
            if (token) {
                const formattedToken = token.startsWith('Bearer') ? token : `Bearer ${token}`;
                headers.set('Authorization', formattedToken);
                console.log('Using token in patients API requests:', formattedToken.substring(0, 20) + '...');
            } else {
                console.warn('No token available for patients API request'); // Changed to warn
            }
            return headers;
        },
    }),
    tagTypes: ['Patient'],
    endpoints: (builder) => ({
        // Create a new patient (registration)
        createPatient: builder.mutation<PatientData, CreatePatientPayload>({
            query: (patientCredentials) => ({
                url: 'patients',
                method: 'POST',
                body: patientCredentials,
            }),
            invalidatesTags: ['Patient'], 
        }),

        // Login patient
        loginPatient: builder.mutation<LoginResponse, PatientLoginCredentials>({
            query: (patientLoginCredentials) => ({
                url: 'auth/login', 
                method: 'POST',
                body: patientLoginCredentials,
            }),
        }),

        // Get all patients
        getPatients: builder.query<PatientData[], void>({
            query: () => 'patients',
            providesTags: ['Patient'], 
        }),

        // Get Patient by Id
        getPatientById: builder.query<PatientData, number>({ 
            query: (patientId) => `patients/${patientId}`,
            providesTags: ['Patient']
        }),

        // Delete patient
        deletePatient: builder.mutation<void, number>({
            query: (patientId) => ({
                url: `patients/${patientId}`,
                method: 'DELETE',
            }),
            invalidatesTags: ['Patient'],
        }),

        // You might want to add an update patient mutation as well
        updatePatient: builder.mutation<PatientData, Partial<PatientData> & { patientId: number }>({
            query: ({ patientId, ...patch }) => ({
                url: `patients/${patientId}`,
                method: 'PUT', // or 'PATCH'
                body: patch,
            }),
            invalidatesTags: ['Patient'],
        }),
    }),
});

// --- Export hooks for convenience ---
export const {
    useCreatePatientMutation,
    useLoginPatientMutation,
    useGetPatientsQuery,
    useGetPatientByIdQuery,
    useDeletePatientMutation,
    useUpdatePatientMutation, 
} = patientsApi;
